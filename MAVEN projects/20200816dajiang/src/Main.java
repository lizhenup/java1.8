/**
 * @author ：lizhen
 * @date ：Created in 2020/8/16 18:55
 * @description：
 * @modified By：
 * @version: $
 */
import java.util.*;
public class Main {
    /*static int ret;
    public static void main(String[] args) {
        //Scanner sc = new Scanner(System.in);
        //while (sc.hasNext()) {
            ret = Integer.MAX_VALUE;
            int N = 4;//sc.nextInt();
            int P = 5;//sc.nextInt();
            int[] start = {0,1,0,1,2};//new int[P];
            int[] end = {1,2,3,3,3};//new int[P];
            int[] time = {15,15,50,30,10};//new int[P];
            int go = 0;//Integer.MAX_VALUE;
            for (int i = 0; i < P; i++) {
                start[i] = sc.nextInt();
                end[i] = sc.nextInt();
                time[i] = sc.nextInt();
                go = Math.min(go, start[i]);
            }
            int road = 3;sc.nextInt();
            int a = 0;
            //findMin(start,end,time,road,0,go);
            //System.out.println(ret);

        //}
    }*/

    /*private static void findMin(int[] start, int[] end, int[] time,int road,int k,int go) {
        if(road == go) {
            ret = Math.min(k, ret);
            return;
        }
        for (int j = 0; j < end.length; j++) {
            if(road == end[j]) {
                findMin(start,end,time,start[j],k+time[j],go);
            }
        }
    }*/
    /*public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        while (sc.hasNext()) {
           int gameNum = sc.nextInt();
           int day = sc.nextInt();
           int[][] ret = new int[gameNum + 1][day+1];
           int[] game = new int[gameNum + 1];
           int[] NeedDay = new int[gameNum + 1];
            for (int i = 1; i < gameNum; i++) {
                game[i] = sc.nextInt();
                NeedDay[i] = sc.nextInt();
            }
            for (int i = 1; i <= gameNum; i++) {
                for (int j = 1; j <= day; j++) {
                    if(NeedDay[i] > j) {
                        ret[i][j] = ret[i - 1][j];
                    }else {
                        int tmp = ret[i - 1][j - NeedDay[i]] + game[i];
                        ret[i][j] = Math.max(tmp, ret[i - 1][j]);
                    }
                }
            }
            System.out.println(ret[gameNum][day]);
        }
    }*/

    /*public static void main(String[] args) {
        StringBuilder sb = new StringBuilder();
        int num = 10000;
        Random random = new Random();
        while (num-- > 0) {
            sb.append(random.nextInt(10));
        }
        System.out.println(sb.toString());
    }*/

    //2 25 40 411 07522004379210090591870605
    //272594074118075220043792100905
    //4
    /*public static void main(String[] args) {
        //Scanner sc = new Scanner(System.in);
        //while (sc.hasNext()) {
            String str = "987516357513731322435545";//sc.nextLine();
        System.out.println(str);
            char[] ret = str.toCharArray();
            int num = 4;//sc.nextInt();
            LinkedList<Character> list = new LinkedList<Character>();
            Queue<Character> queue = new LinkedList<>();
            for (int i = 0; i < ret.length; i++) {
                list.add(ret[i]);
                queue.offer(ret[i]);
            }
            HashMap<Character, Integer> map = new HashMap<>();
            PriorityQueue<Character> pQueue = new PriorityQueue<>(
                    Collections.reverseOrder());
            int n = num;
            while (!queue.isEmpty()) {
                if(pQueue.size() < num) {
                    char tmp = queue.poll();
                    pQueue.add(tmp);
                    map.put(tmp,map.containsKey(tmp) ? map.get(tmp) + 1 : 1);
                }else {
                    if(n == 0) {
                        break;
                    }else {
                        if(map.size() > 1) {
                            char t = pQueue.poll();
                            int k = map.get(t);
                            while (k-- > 0 && n-- > 0) {
                                list.removeFirstOccurrence(t);
                            }
                            if(k <= 0) {
                                map.remove(t);
                            }
                        }
                    }
                }
                if(queue.isEmpty() && n > 0) {
                    while (n-- > 0) {
                        list.removeFirstOccurrence(pQueue.poll());
                    }
                }




            }
            /*for (int i = 1; i < list.size(); i++) {
                if(list.get(i) < list.get(i - 1) && num > 0) {
                    list.remove(i - 1);
                    num--;
                }
                if(num == 0) {
                    break;
                }
            }*/
            /*StringBuilder sb = new StringBuilder();
            for(char c : list) {
                //这里不确定是否要在输出0123的情况下去掉0
                if((sb.length() == 0 && c != '0') || sb.length() != 0) {
                    sb.append(c);
                }
            }
            if(sb.length() == 0) {
                sb.append(0);
            }
            System.out.println(sb.toString());*/


       // }
    //}
       public static void main(String[] args) {
           Scanner sc = new Scanner(System.in);
           while (sc.hasNext()) {
               String str = sc.nextLine();
               int num = sc.nextInt();
               if(num >= str.length()) {
                   System.out.println(0);
               }else {
                   StringBuilder sb = new StringBuilder(str);
                   boolean flg;
                   while (num-- > 0) {
                       flg = false;
                       for (int i = 0; i < sb.length() - 1; i++) {
                           if(sb.charAt(i + 1) < sb.charAt(i)) {
                               flg = true;
                               sb.deleteCharAt(i);
                               break;
                           }
                       }
                       if (!flg) {
                           sb.deleteCharAt(sb.length() - 1);
                       }
                   }
                   while (sb.charAt(0) == '0' && sb.length() > 1) {
                       sb.deleteCharAt(0);
                   }
                   System.out.println(sb.toString());
               }
           }
       }
}

